package ibis.deploy;

import ibis.util.TypedProperties;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

public class Grid {
	
	private String name;
	
	//cluster representing defaults
	private Cluster defaults;
	
	private List<Cluster> clusters;
	
	/**
	 * Constructs a grid object from properties stored in the given file.
	 * And also constructs the clusters inside this grid.
	 * 
	 * @param file
	 *            the file containing the properties
	 * @throws FileNotFoundException
	 *             if the given file cannot be found
	 * @throws IOException
	 *             if reading from the given file fails
	 * @throws Exception
	 *             if the properties don't contain a 'name' property with the
	 *             name of the grid
	 */
	public Grid(File file) throws FileNotFoundException,
			IOException, Exception {
		TypedProperties properties = new TypedProperties();
		properties.loadFromFile(file.getAbsolutePath());

		String name = properties.getProperty("name");
		
		if (name == null || name.length() == 0) {
			throw new Exception("no grid name specified in grid file: " + file);
		}
		
		defaults = new Cluster(properties, "defaults");
		
		String[] clusterNames = properties.getStringList("clusters");
		if (clusterNames != null) {
			for (String clusterName: clusterNames) {
				Cluster cluster = new Cluster(properties, clusterName);
				clusters.add(cluster);
			}
		}
	}
	

	/**
	 * Constructs a grid with the given name and the given
	 * clusters belonging to this grid.
	 * 
	 * @param name
	 *            the name of the grid
	 * @param clusters
	 *            the clusters belonging to this grid.
	 * @throws Exception
	 *             if the name is <code>null</code>
	 */
	public Grid(String name, Cluster... clusters) throws Exception {
		if (name == null) {
			throw new Exception("no name specified for grid");
		}
		
		this.name = name;
		this.clusters = Arrays.asList(clusters);
		defaults = new Cluster("defaults");
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Returns the Clusters in this Grid. Warning: returns the
	 * actual list, not a copy.
	 * 
	 * @return the clusters in this Grid
	 */
	public List<Cluster> getClusters() {
		return clusters;
	}

	/**
	 * Sets the clusters in this Grid. Any earlier added
	 * clusters will be removed from this Grid.
	 * 
	 * @param clusters
	 *            the clusters to be set
	 */
	public void setClusters(List<Cluster> clusters) {
		this.clusters = clusters;
	}

	/**
	 * Adds a cluster to this Grid.
	 * 
	 * @param cluster
	 *            the cluster to be added.
	 */
	public void addCluster(Cluster cluster) {
		clusters.add(cluster);
	}
	
	/**
	 * Removes the given cluster from the cluster group (if it belongs
	 * to the cluster group at all).
	 * 
	 * @param cluster
	 *            the cluster to be removed from this group
	 */
	public void removeCluster(Cluster cluster) {
		clusters.remove(cluster);
	}

	/**
	 * Get an cluster with a given name from this Grid
	 * 
	 * @param clusterName
	 *            the name of the cluster to search for
	 * @return the cluster with the given name, or <code>null</code> if no
	 *         clusters with the given name exist in this Grid.
	 */
	public Cluster getCluster(String clusterName) {
		for (Cluster cluster : clusters) {
			if (cluster.getName().equals(clusterName)) {
				return cluster;
			}
		}
		return null;
	}

	public void save(File file) throws Exception {
		if (!file.exists()) {
			if (!file.createNewFile()) {
				throw new IOException("failed to create a new file '" + file
						+ "'.");
			}
		}
		PrintWriter out = new PrintWriter(file);
		// write defaults
		out.println("# Grid properties file, "
				+ "generated by Ibis Deploy on "
				+ new Date(System.currentTimeMillis()));
		out.println();
		out.println("# Grid name");
		out.println("name=" + getName());

		out.println();
		out.println("# Default settings\n");
		defaults.print(out, false);

		// write names of clusters
		out.println();
		out.println("# This cluster group consists of these clusters");

		out.println("clusters=");
		for (Cluster cluster : clusters) {
			out.print(cluster.getName() + ",");
		}
		out.println();

		// write clusters
		for (Cluster cluster : clusters) {
			out.println();
			out.println("# Details of cluster '" + cluster.getName());
			cluster.print(out, true);

		}
	}


}
