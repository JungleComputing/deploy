package ibis.deploy;

import ibis.util.TypedProperties;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

/**
 * Group of applications, only relation is they live in one file :)
 * 
 * @author ndrost
 * 
 */
public class ApplicationGroup {

	private String name;

	// application object holding defaults
	private Application defaults;

	private List<Application> applications;

	/**
	 * Constructs an application group from properties stored in the given file.
	 * And also constructs the applications inside this application group.
	 * 
	 * @param file
	 *            the file containing the properties
	 * @throws FileNotFoundException
	 *             if the given file cannot be found
	 * @throws IOException
	 *             if reading from the given file fails
	 * @throws Exception
	 *             if the properties don't contain a 'name' property with the
	 *             name of the application group
	 */
	public ApplicationGroup(File file) throws FileNotFoundException,
			IOException, Exception {
		TypedProperties properties = new TypedProperties();
		properties.loadFromFile(file.getAbsolutePath());

		String name = properties.getProperty("name");
		
		if (name == null || name.length() == 0) {
			throw new Exception("no application group name specified in application file: " + file);
		}
		
		defaults = new Application(properties, null);
		
		String[] applicationNames = properties.getStringList("applications");
		if (applicationNames != null) {
			for (String applicationName: applicationNames) {
				Application application = new Application(properties, applicationName);
				applications.add(application);
			}
		}
	}

	/**
	 * Constructs an application group with the given name and the given
	 * applications belonging to this group.
	 * 
	 * @param name
	 *            the name of the application group
	 * @param applications
	 *            the applications belonging to this application group.
	 * @throws Exception
	 *             if the name is <code>null</code>
	 */
	public ApplicationGroup(String name, Application... applications)
			throws Exception {
		if (name == null) {
			throw new Exception("no name specified for application group");
		}
		
		this.name = name;
		this.applications = Arrays.asList(applications);
		this.defaults = new Application("defaults");
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Returns the applications in this ApplicationGroup. Warning: returns the
	 * actual list, not a copy.
	 * 
	 * @return the applications in this ApplicationGroup
	 */
	public List<Application> getApplications() {
		return applications;
	}

	/**
	 * Sets the applications in this ApplicationGroup. Any earlier added
	 * applications will be removed from this ApplicationGroup.
	 * 
	 * @param applications
	 *            the applications to be set
	 */
	public void setApplications(List<Application> applications) {
		this.applications = applications;
	}

	/**
	 * Adds an application to this ApplicationGroup.
	 * 
	 * @param application
	 *            the application to be added.
	 */
	public void addApplication(Application application) {
		applications.add(application);
	}
	
	/**
	 * Removes the given application from the application group (if it belongs
	 * to the application group at all).
	 * 
	 * @param application
	 *            the application to be removed from this group
	 */
	public void removeApplication(Application application) {
		applications.remove(application);
	}

	/**
	 * Get an application with a given name from this ApplicationGroup
	 * 
	 * @param applicationName
	 *            the name of the application to search for
	 * @return the application with the given name, or <code>null</code> if no
	 *         applications with the given name exist in this ApplicationGroup.
	 */
	public Application getApplication(String applicationName) {
		for (Application application : applications) {
			if (application.getName().equals(applicationName)) {
				return application;
			}
		}
		return null;
	}

	public void save(File file) throws Exception {
		if (!file.exists()) {
			if (!file.createNewFile()) {
				throw new IOException("failed to create a new file '" + file
						+ "'.");
			}
		}
		PrintWriter out = new PrintWriter(file);
		// write defaults
		out.println("# Application properties file, "
				+ "generated by Ibis Deploy on "
				+ new Date(System.currentTimeMillis()));
		out.println();
		out.println("# Application group name");
		out.println("name=" + getName());

		out.println();
		out.println("# Default settings\n");
		defaults.print(out, false);

		// write names of applications
		out.println();
		out.println("# This application group consists of these applications");

		out.println("applications=");
		for (Application application : applications) {
			out.print(application.getName() + ",");
		}
		out.println();

		// write applications
		for (Application application : applications) {
			out.println();
			out.println("# Details of application '" + application.getName());
			application.print(out, true);

		}
	}


}
